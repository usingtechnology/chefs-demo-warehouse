/*

we want to separate our app logic from actually running the app 
in production - you would want to use something else that is 
more robust such as unitech - but each app has its own best way
to do it - so it really depends on each app

*/

var app = require('../app');
var http = require('http');
var debug = require('debug')('app:server');
var config = require('config');

/*
get port from environment and store it in Express 
*/

const PORT = config.get('server.port');

var port = normalizePort(PORT || '9998');
app.set('port', port);

/*
create HTTP server
*/

var server = http.createServer(app);

// listen on provided port, on all network interfaces

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// normalize a port into a number, string, or false

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

// error event

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe' + port : 'Port' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof port === 'string' ? 'Pipe' + addr : 'Port' + addr;
  debug('Listening on ' + bind);
}
